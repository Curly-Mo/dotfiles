#!/bin/bash
# https://github.com/academo/ww-run-raise
# Usage: run-or-raise -f "window class filter" -c "run if not found"
# Usage: run-or-raise -fa "window title filter" -c "run if not found"

readonly IGNORE_APPS=('launch_or_focus' 'ulauncher-spotify')
GLOBAL="false"
TOGGLE="false"
POSITIONAL=()
while [[ $# -gt 0 ]]; do
	key="$1"

	case $key in
	-c | --command)
		COMMAND="$2"
		shift # past argument
		shift # past value
		;;
	-f | --filter)
		FILTERBY="$2"
		shift # past argument
		shift # past value
		;;
	-fa | --filter-alternative)
		FILTERALT="$2"
		shift # past argument
		shift # past value
		;;
	-t | --toggle)
		TOGGLE="true"
		shift # past argument
		;;
	-g | --global)
		GLOBAL="true"
		shift # past argument
		;;
	-h | --help)
		HELP="1"
		shift # past argument
		shift # past value
		;;
	*)                  # unknown option
		POSITIONAL+=("$1") # save it in an array for later
		shift              # past argument
		;;
	esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

if [ -n "$HELP" ]; then
	cat <<EOF
run-or-raise. Utility to raise or jump an applications in KDE. It interacts with KWin using KWin scripts and it is compatible with X11 and Wayland

Paramaters:

-h  --help                show this help
-f  --filter              filter by window class
-fa --filter-alternative  filter by window title (caption)
-g  --global              don't filter by current virtual desktop
-t  --toggle              also minimize the window if it is already active
-c  --command             command to check if running and run if no process is found
EOF
	exit 0
fi

SCRIPT_TEMPLATE=$(
	cat <<EOF
function kwinactivateclient(clientClass, clientCaption, global, toggle) {
  var clients = workspace.windowList();
  var compareToCaption = new RegExp(clientCaption.toLowerCase() || '', 'i');
  var compareToClass = clientClass.toLowerCase();
  var isCompareToClass = clientClass.length > 0
  var matchingClients = [];
  for (var i = 0; i < clients.length; i++) {
    var client = clients[i];
    var classCompare = (isCompareToClass && client.resourceClass.toLowerCase() == compareToClass)
    var captionCompare = (!isCompareToClass && compareToCaption.exec(client.caption.toLowerCase()))
    var desktopCompare = (global || (client.desktops.length > 0 && client.desktops[0] == workspace.currentDesktop))
    if ((classCompare || captionCompare) && desktopCompare) {
      matchingClients.push(client);
    }
  }
  matchingClients.sort(function (a, b) {
      return b.stackingOrder - a.stackingOrder;
  });
  var client = matchingClients[0];
  if (workspace.activeWindow != client) {
    workspace.activeWindow = client;
  } else if (toggle) {
    client.minimized = !client.minimized;
  }
}
kwinactivateclient('CLASS_NAME', 'CAPTION_NAME', GLOBAL, TOGGLE);
EOF
)

CURRENT_SCRIPT_NAME=$(basename "$0")

# ensure the script file exists
function ensure_script {
	if [ ! -f SCRIPT_PATH ]; then
		if [ ! -d "$SCRIPT_FOLDER" ]; then
			mkdir -p "$SCRIPT_FOLDER"
		fi
		SCRIPT_CONTENT=${SCRIPT_TEMPLATE/CLASS_NAME/$1}
		SCRIPT_CONTENT=${SCRIPT_CONTENT/CAPTION_NAME/$2}
    SCRIPT_CONTENT=${SCRIPT_CONTENT/GLOBAL/$3}
    SCRIPT_CONTENT=${SCRIPT_CONTENT/TOGGLE/$4}
		#if [ "$1" == "class" ]; then
		#SCRIPT_CONTENT=${SCRIPT_CLASS_NAME/REPLACE_ME/$2}
		#else
		#SCRIPT_CONTENT=${SCRIPT_CAPTION/REPLACE_ME/$2}
		#fi
		echo "$SCRIPT_CONTENT" >"$SCRIPT_PATH"
	fi
}

if [ -z "$FILTERBY" ] && [ -z "$FILTERALT" ]; then
	echo You need to specify a window filter. Either by class -f or by title -fa
	exit 1
fi

IS_RUNNING=$(pgrep -o -a -f "$COMMAND" | grep -vE "$CURRENT_SCRIPT_NAME$(printf "|%s" "${IGNORE_APPS[@]}")")
# echo $CURRENT_SCRIPT_NAME
# echo $COMMAND
# echo $IS_RUNNING

if [ -n "$IS_RUNNING" ] || [ -n "$FILTERALT" ]; then

	# trying for XDG_CONFIG_HOME first
	SCRIPT_FOLDER_ROOT=$XDG_CONFIG_HOME
	if [[ -z $SCRIPT_FOLDER_ROOT ]]; then
		# fallback to the home folder
		SCRIPT_FOLDER_ROOT=$HOME
	fi

	SCRIPT_FOLDER="$SCRIPT_FOLDER_ROOT/.wwscripts/"
	SCRIPT_NAME=$(echo "$FILTERBY$FILTERALT$GLOBAL$TOGGLE" | md5sum | head -c 32)
	SCRIPT_PATH="$SCRIPT_FOLDER$SCRIPT_NAME"
	ensure_script "$FILTERBY" "$FILTERALT" "$GLOBAL" "$TOGGLE"

  SINCE=$(date '+%Y-%m-%d %H:%M:%S')
	# install the script
	ID=$(dbus-send --session --print-reply --dest=org.kde.KWin /Scripting org.kde.kwin.Scripting.loadScript "string:$SCRIPT_PATH" "string:$SCRIPT_NAME" | awk 'END {print $2}')
	# echo "dbus-send --session --print-reply --dest=org.kde.KWin /Scripting org.kde.kwin.Scripting.loadScript "string:$SCRIPT_PATH" "string:$SCRIPT_NAME" | awk 'END {print $2}'"
	# some KDEs version use Script.run others Scripting.run
	# run the script
  r=$(dbus-send --session --print-reply --dest=org.kde.KWin /Scripting/Script$ID org.kde.kwin.Script.run >/dev/null 2>&1)
  echo $r
	# dbus-send --session --print-reply --dest=org.kde.KWin /Scripting/Script$ID org.kde.kwin.Scripting.run >/dev/null 2>&1
	# stop the script
	dbus-send --session --print-reply --dest=org.kde.KWin /Scripting/Script$ID org.kde.kwin.Script.stop >/dev/null 2>&1
	# dbus-send --session --print-reply --dest=org.kde.KWin /Scripting/Script$ID org.kde.kwin.Scripting.stop >/dev/null 2>&1
	# uninstall the script
	dbus-send --session --print-reply --dest=org.kde.KWin /Scripting org.kde.kwin.Scripting.unloadScript "string:$SCRIPT_NAME" >/dev/null 2>&1

  RESPONSE=$(journalctl _COMM=kwin_wayland -o cat --since "$SINCE")
  # echo $RESPONSE
  if [ -n "$RESPONSE" ]; then
    $COMMAND &
  fi
elif [ -n "$COMMAND" ]; then
	$COMMAND &
fi
